from typing import Protocol, Awaitable, Self

class Producer(Protocol):
    async def start(self) -> Awaitable[None]:
        ...
    async def send(self, topic: str, value: bytes) -> Awaitable[None]:
        ...
    async def stop(self) -> Awaitable[None]:
        ...
    
class Consumer(Protocol):
    async def start(self) -> Awaitable[None]:
        ...
    def __aiter__(self) -> Awaitable[bytes]:
        ...
    async def __anext__(self) -> Awaitable[Self]:
        ...